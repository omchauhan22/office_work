<IfModule mod_rewrite.c>
 
    RewriteEngine On
   
    RewriteCond %{REQUEST_FILENAME} !-f
   
    RewriteCond %{REQUEST_FILENAME} !-d
   
    RewriteRule ^(.*)$ index.php/$1 [L]
   
    </IfModule>


SET GLOBAL sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY',''));

=> Project_model.php
	function GetTaskIsNotEnd($thread_id = NULL){
			$thread = '';
			if($thread_id != '' && $thread_id  != NULL){
				$thread = ' AND ut.thread_id = '.$thread_id;
			}	
			$where = ' ut.status = 1 '. $thread .'	';
			$select = 'ut.aims_user_task_id as utask_id, ut.date_ended as end_time, ut.status as task_status,';
			$this->db->select($select);
			$this->db->from($this->tbl_aims_user_task.' ut');
			$this->db->where($where);
			$this->db->order_by("ut.aims_user_task_id","ASC");
			return $this->db->get()->result_array();
		
	}
=> Leave_model.php 

	function getEmpTimeStamp($data)
	{
		$where = "user_id = ".$data['user_id']." AND from_time_stemp";
		$this->db->select('id,user_id,from_time_stemp,to_time_stemp');
		$this->db->from($this->aims_emp_leave_days);
		$this->db->where($where);
		$this->db->group_by('id','from_time_stemp');
		$res = $this->db->get()->result_array();
		return $res;
	}

=> Common_model.php 

	public function getBreakID($user_id=null){
		if($this->class_name == 'json'){
			$USER_ID  = $user_id;
		}else{
			$USER_ID = $this->session->userdata('USER_ID');
		}
		$to_date = date('Y-m-d');
		$select = "UB.aims_user_breaks_id as id, UB.start_time as bstart, UB.end_time as bendtime";
		$where = "UB.user_id = $USER_ID AND UB.break_date = STR_TO_DATE('".$to_date."', '%Y-%m-%d')";	
		$query = $this->db->select($select)
						  ->from($this->aims_user_breaks.' UB')
						  ->where($where)
						  ->get()
						  ->result_array();
		return $query;
	}

=> 
echo '<pre>';
print_r($arr);
exit;
echo '</pre>';


=>
git checkout -b feature/
git checkout -b bugfix/

=> thread.css
.thread_action {
    display: flex;
    align-items: center;
    gap: 5px;
}
.thread_action .bill_add{
    font-size: 16px;
}
.thread_action .bill_not{
    font-size: 18px;
    cursor: pointer;
}


=> thread.js
    document.getElementById('bill_check_'+user_track_id).classList.remove('bill_add');
    document.getElementById('bill_check_'+user_track_id).classList.add('bill_not');  
    document.getElementById('bill_check_'+user_track_id).onclick = null; 
    document.getElementById('bill_check_' + user_track_id).innerText = 'task_alt';

=> thread_time_log.php
	if ($foundMatchingEntry) {
					$tab['action'] .= '<i class="bill_add material-symbols-outlined" id="bill_check_'.$tdata['utask_id'].'" aria-hidden="true">task_alt</i> | ';
				} else{
					$tab['action'] .= '<i class="bill_not material-symbols-outlined" id="bill_check_'.$tdata['utask_id'].'" aria-hidden="true" onclick="add_billable_time('.$tdata['utask_id'].',\''.$tdata['user_id'].'\',\''.$tdata['start_time'].'\',\''.$tdata['end_time'].'\',\''.$t_time.'\',\''.$tdata['task_name'].'\')" title="Add to billable">more_time</i> | ';
				}


ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

	
if(!function_exists('getDateFormat')){
	function getDateFormat($date = null, $is_time = false, $format = 'd-M-Y', $day = '- 0') {
        if($date != null) {
            if ($is_time) {
                return date('d-M-Y H:i:s', strtotime($date));
            } else {
                return date($format, strtotime( $day.' day',strtotime ( $date )));
            }
        } else {
            return date($format);
        }
	}
}

		$StartDate = getDateFormat($from_date, null, 'Y-m-01 h:i:s');  	
		$End_Date = getDateFormat($to_date, null, 'Y-m-t h:i:s');






































